package com.springboot.blog.Controller;

import com.springboot.blog.Repository.CustomerRepository;
import com.springboot.blog.Repository.RoleRepository;
import com.springboot.blog.Security.JWTTokenProvider;
import com.springboot.blog.model.Customer;
import com.springboot.blog.model.Roles;
import com.springboot.blog.payload.JWTAuthResponse;
import com.springboot.blog.payload.LoginDTO;
import com.springboot.blog.payload.SignupDTO;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.Collections;

@Controller
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JWTTokenProvider jwtTokenProvider;

    @PostMapping("/sign-in")
    public ResponseEntity<JWTAuthResponse> authenticateUser(@RequestBody LoginDTO loginDTO){
        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(loginDTO.getUserNameOrEmail() ,
                loginDTO.getPassword()));

        SecurityContextHolder.getContext().setAuthentication(authentication);

        String token = jwtTokenProvider.generateToken(authentication);

        return ResponseEntity.ok(new JWTAuthResponse(token));
    }

    @PostMapping("/sign-up")
    public ResponseEntity<?> registerUser(@Valid @RequestBody SignupDTO signupDTO) {
        if(customerRepository.existsCustomerByUserName(signupDTO.getUserName())){
            return new ResponseEntity<>("Username is already taken!", HttpStatus.BAD_REQUEST);
        }
        if(customerRepository.existsCustomerByEmail(signupDTO.getEmail())){
            return new ResponseEntity<>("Email is already taken!", HttpStatus.BAD_REQUEST);
        }

        Customer customer = new Customer();
        customer.setName(signupDTO.getName());
        customer.setEmail(signupDTO.getEmail());
        customer.setUserName(signupDTO.getUserName());
        customer.setPassword(passwordEncoder.encode(signupDTO.getPassword()));
        Roles role = roleRepository.findByName("ROLE_ADMIN").get();
        customer.setRoles(Collections.singleton(role));

        customerRepository.save(customer);

        return new ResponseEntity<>("successfully sign-up!", HttpStatus.OK);
    }

}

package com.springboot.blog.Controller;

import com.springboot.blog.Repository.CommentRepository;
import com.springboot.blog.Service.CommentService;
import com.springboot.blog.payload.CommentDTO;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/api/posts")
public class CommentController {

    private final CommentRepository commentRepository;
    private CommentService commentService;
    @Autowired
    public CommentController(CommentService commentService, CommentRepository commentRepository){
        this.commentService = commentService;
        this.commentRepository = commentRepository;
    }

    @PostMapping("/{postId}/comments")
    public ResponseEntity<CommentDTO> createComment(@PathVariable(value = "postId") Long id ,
                                                    @Valid @RequestBody CommentDTO commentDTO){

        CommentDTO newComment = commentService.createComment(id , commentDTO);
        if(newComment != null){
            return new ResponseEntity<>(commentService.createComment(id , commentDTO) , HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping("/{postId}/comments")
    public ResponseEntity<List<CommentDTO>> getAllComments(@PathVariable(value = "postId") Long id){
        List<CommentDTO> comments = commentService.getAllComments(id);
        if(comments != null) {
            return new ResponseEntity<>(comments , HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/{postId}/comments/{commentId}")
    public ResponseEntity<CommentDTO> getCommentById(@PathVariable(value = "postId") Long postId ,
                                                     @PathVariable(value = "commentId") Long commentId) {

        CommentDTO commentDTO = commentService.getCommentById(postId , commentId);
        if(commentDTO != null){
            return new ResponseEntity<>(commentDTO , HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PutMapping("/{postId}/comments/{commentId}")
    public ResponseEntity<CommentDTO> updateComment(@PathVariable(value = "postId") Long postId ,
                                    @PathVariable(value = "commentId") Long commentId ,
                                    @Valid @RequestBody CommentDTO commentDTO) {

        CommentDTO updatedComment = commentService.updateComment(postId , commentId , commentDTO);

        if(updatedComment != null){
            return new ResponseEntity<>(updatedComment , HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping("/{postId}/comments/{commentId}")
    public ResponseEntity<?> deleteComment(@PathVariable(value = "postId") Long postId ,
                                                    @PathVariable(value = "commentId") Long commentId) {
        CommentDTO deletedComment = commentService.deleteComment(postId , commentId);

        if(deletedComment != null){
            return new ResponseEntity<>(deletedComment , HttpStatus.OK);
        } else {
            return new ResponseEntity<>("No such comments found " ,HttpStatus.BAD_REQUEST);
        }
    }



}
package com.springboot.blog.Controller;

import com.springboot.blog.Service.PostService;
import com.springboot.blog.payload.PostDTO;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("api/posts")
public class PostController {

    private PostService postService;
    @Autowired
    public PostController(PostService postService) {
        this.postService = postService;
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping(value="/create" , consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<PostDTO> createPost(@Valid @RequestPart PostDTO postDTO , @RequestPart MultipartFile image) {
        if(!image.isEmpty()) {
            try {
                postDTO.setImageName(image.getOriginalFilename());
                postDTO.setImageType(image.getContentType());
                postDTO.setImageData(image.getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return new ResponseEntity<>(postService.createPost(postDTO) , HttpStatus.CREATED);
    }

    @GetMapping("/all-posts")
    public ResponseEntity<?> getAllPosts(){
        List<PostDTO> posts = postService.getAllPosts();
        if(!posts.isEmpty()) {
            return new ResponseEntity<>(posts, HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Empty" , HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/get-post/{id}")
    public ResponseEntity<PostDTO> getPostById(@PathVariable Long id){
        PostDTO post = postService.getPostById(id);
        if(post != null) {
            return new ResponseEntity<>(post , HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping(value="/update-post/{id}")
    public ResponseEntity<PostDTO> updatePost1(@Valid @RequestBody PostDTO postDTO , @PathVariable(name="id") Long id){
        PostDTO updatedPost = postService.updatePost(postDTO , id);
        if(updatedPost != null) {
            return new ResponseEntity<>(updatedPost , HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping(value="/update-post-image/{id}" , consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<PostDTO> updatePost2(@Valid @PathVariable Long id, @RequestPart MultipartFile image ){
        PostDTO updatedPost = null;
        updatedPost = postService.updatePostWithImage(id , image);
        if(updatedPost != null) {
            return new ResponseEntity<>(updatedPost , HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/delete-post/{id}")
    public ResponseEntity<?> deletePostById(@PathVariable(name="id") Long id){
        PostDTO deletedPost = postService.deletePostById(id);
        if(deletedPost != null) {
            return new ResponseEntity<>(deletedPost , HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Post not found" , HttpStatus.NOT_FOUND);
        }
    }

}
